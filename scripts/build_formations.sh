#!/bin/bash

# Script principal de g√©n√©ration des formations selon les nouvelles consignes
# G√©n√®re : formation_acceleree.pdf, formation_longue.pdf, modules individuels

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
BUILD_DIR="$PROJECT_DIR/build"
SUPPORTS_DIR="$PROJECT_DIR/supports"
TP_DIR="$PROJECT_DIR/travaux_pratiques"
TEMPLATE_DIR="$SCRIPT_DIR/templates"

echo "üöÄ G√©n√©ration des formations Linux selon les nouvelles sp√©cifications"
echo "üìÅ R√©pertoire projet: $PROJECT_DIR"

# V√©rification des d√©pendances
echo "üîç V√©rification des d√©pendances..."
if ! command -v pandoc &> /dev/null; then
    echo "‚ùå Pandoc n'est pas install√©"
    exit 1
fi

if ! command -v pdflatex &> /dev/null; then
    echo "‚ùå pdflatex n'est pas install√©"
    exit 1
fi

echo "‚úÖ D√©pendances OK"

# Nettoyage et pr√©paration
echo "üßπ Pr√©paration des r√©pertoires..."
rm -rf "$BUILD_DIR"
mkdir -p "$BUILD_DIR"/{formations,modules_base,modules_additionnels}

# Fonction pour g√©n√©rer la formation acc√©l√©r√©e
generate_formation_acceleree() {
    echo "‚ö° G√©n√©ration formation acc√©l√©r√©e..."
    
    local output_file="$BUILD_DIR/formations/formation_acceleree.pdf"
    local temp_md="$BUILD_DIR/temp_formation_acceleree.md"
    
    # En-t√™te avec m√©tadonn√©es
    cat > "$temp_md" << 'EOF'
---
title: "Formation Linux Acc√©l√©r√©e"
author: "Pascal Guinet - Prima Solutions"
date: \today
module-content: |
  **Dur√©e :** 2 s√©ances de 4 heures (8h total)
  
  **Public :** Utilisateurs avec VM Linux et acc√®s SSH
  
  **Objectifs :**
  - Ma√Ætriser les commandes Linux essentielles
  - Naviguer efficacement dans le syst√®me de fichiers
  - G√©rer les droits et permissions
  - Automatiser les t√¢ches courantes
  
  **Approche :** Formation intensive ax√©e sur la pratique
reset-chapter-numbering: true
---

# Pr√©sentation de la formation

Cette formation acc√©l√©r√©e couvre l'essentiel de Linux en 8 heures intensives.

## Jour 1 (4h) : Fondamentaux
- Modules 1, 2, 3 : D√©couverte, navigation, manipulation de fichiers

## Jour 2 (4h) : Utilisation avanc√©e  
- Modules 4, 5, 6, 7, 8 : Consultation, droits, processus, r√©seaux, scripts

\newpage

EOF

    # Ajouter les modules s√©lectionn√©s pour la formation acc√©l√©r√©e
    local modules_acceleres=(1 2 3 4 5 6 7 8)
    
    for module_num in "${modules_acceleres[@]}"; do
        add_module_to_document "$module_num" "$temp_md" "condensed"
    done
    
    generate_pdf_from_markdown "$temp_md" "$output_file" "Formation acc√©l√©r√©e"
}

# Fonction pour g√©n√©rer la formation longue
generate_formation_longue() {
    echo "üìö G√©n√©ration formation longue..."
    
    local output_file="$BUILD_DIR/formations/formation_longue.pdf"
    local temp_md="$BUILD_DIR/temp_formation_longue.md"
    
    # En-t√™te avec m√©tadonn√©es
    cat > "$temp_md" << 'EOF'
---
title: "Formation Linux Compl√®te"
author: "Pascal Guinet - Prima Solutions" 
date: \today
module-content: |
  **Dur√©e :** 25 s√©ances de 1h30 (37h30 total)
  
  **Public :** Utilisateurs Windows avec VirtualBox
  
  **Objectifs :**
  - Apprentissage progressif et d√©taill√© de Linux
  - Installation et configuration d'un environnement
  - Ma√Ætrise compl√®te des outils et commandes
  - Autonomie dans l'administration syst√®me
  
  **Approche :** Formation √©tal√©e avec nombreux travaux pratiques
reset-chapter-numbering: true
---

# Pr√©sentation de la formation

Formation compl√®te Linux sur 25 s√©ances, adapt√©e aux d√©butants.

## Organisation
- **S√©ances 1-3 :** Installation et d√©couverte (Module 1)
- **S√©ances 4-7 :** Navigation syst√®me (Module 2)
- **S√©ances 8-12 :** Manipulation fichiers (Module 3)
- **S√©ances 13-16 :** √âdition et recherche (Module 4)
- **S√©ances 17-20 :** Droits et s√©curit√© (Module 5)
- **S√©ances 21-23 :** Processus et syst√®me (Module 6)
- **S√©ances 24-25 :** R√©seau et automatisation (Modules 7-8)

\newpage

EOF

    # Ajouter tous les modules avec contenu d√©taill√©
    for module_num in {1..8}; do
        add_module_to_document "$module_num" "$temp_md" "detailed"
    done
    
    generate_pdf_from_markdown "$temp_md" "$output_file" "Formation longue"
}

# Fonction pour ajouter un module au document
add_module_to_document() {
    local module_num=$1
    local temp_md=$2
    local level=${3:-"normal"}  # condensed, normal, detailed
    
    local module_num_fmt=$(printf "%02d" $module_num)
    local module_dir=$(ls -d "$SUPPORTS_DIR/module_${module_num_fmt}_"* 2>/dev/null | head -1)
    
    if [ ! -d "$module_dir" ]; then
        echo "  ‚ö†Ô∏è Module $module_num non trouv√©"
        return
    fi
    
    local module_name=$(basename "$module_dir" | sed 's/module_[0-9]*_//' | tr '_' ' ')
    local module_title=$(echo "$module_name" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2); print}')
    
    echo "  üìÑ Ajout Module $module_num: $module_title"
    
    # Titre de partie (nouvelle page + titre non num√©rot√©) - version simplifi√©e
    echo "" >> "$temp_md"
    echo "\\newpage" >> "$temp_md"
    echo "" >> "$temp_md"
    echo "# Module $module_num : $module_title {.unnumbered}" >> "$temp_md"
    echo "" >> "$temp_md"
    
    # Ajouter les chapitres
    for chapter in "$module_dir"/*.md; do
        if [ -f "$chapter" ]; then
            local chapter_name=$(basename "$chapter" .md | sed 's/^[0-9]*_//' | tr '_' ' ')
            echo "" >> "$temp_md"
            echo "# $chapter_name" >> "$temp_md"
            echo "" >> "$temp_md"
            
            # Contenu du chapitre selon le niveau
            if [ "$level" = "condensed" ]; then
                # Version condens√©e : prendre seulement les sections principales
                sed -n '1,/^## /p' "$chapter" | head -n -1 >> "$temp_md"
            else
                # Version compl√®te
                cat "$chapter" >> "$temp_md"
            fi
            
            # IMPORTANT: S'assurer qu'il y a une ligne vide √† la fin pour √©viter 
            # la concat√©nation accidentelle avec le titre suivant
            echo "" >> "$temp_md"
            echo "" >> "$temp_md"
            echo "" >> "$temp_md"
        fi
    done
    
    # Ajouter les travaux pratiques si pas condens√©
    if [ "$level" != "condensed" ]; then
        local tp_dir=$(ls -d "$TP_DIR/tp${module_num_fmt}_"* 2>/dev/null | head -1)
        if [ -d "$tp_dir" ]; then
            echo "" >> "$temp_md"
            echo "# Travaux Pratiques" >> "$temp_md"
            echo "" >> "$temp_md"
            
            for tp_file in "$tp_dir"/*.md; do
                if [ -f "$tp_file" ]; then
                    local tp_name=$(basename "$tp_file" .md | tr '_' ' ')
                    echo "## $tp_name" >> "$temp_md"
                    echo "" >> "$temp_md"
                    cat "$tp_file" >> "$temp_md"
                    echo "" >> "$temp_md"
                fi
            done
        fi
    fi
}

# Fonction pour g√©n√©rer un module individuel
generate_individual_module() {
    local module_num=$1
    
    local module_num_fmt=$(printf "%02d" $module_num)
    local module_dir=$(ls -d "$SUPPORTS_DIR/module_${module_num_fmt}_"* 2>/dev/null | head -1)
    
    if [ ! -d "$module_dir" ]; then
        echo "  ‚ö†Ô∏è Module $module_num non trouv√©"
        return 1
    fi
    
    local module_name=$(basename "$module_dir" | sed 's/module_[0-9]*_//' | tr '_' ' ')
    local module_title=$(echo "$module_name" | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2); print}')
    local output_file="$BUILD_DIR/modules_base/module_${module_num_fmt}_$(echo $module_name | tr ' ' '_').pdf"
    local temp_md="$BUILD_DIR/temp_module_${module_num_fmt}.md"
    
    echo "  üìÑ Module $module_num: $module_title"
    
    # En-t√™te du module
    cat > "$temp_md" << EOF
---
title: "Module $module_num : $module_title"
author: "Pascal Guinet - Prima Solutions"
date: \today
module-content: |
  **Dur√©e estim√©e :** 3-4 heures
  
  **Objectifs :** Ma√Ætriser les concepts et outils du module $module_num
  
  **Pr√©requis :** Modules pr√©c√©dents compl√©t√©s
  
  **Contenu :** Voir sommaire d√©taill√© ci-apr√®s
reset-chapter-numbering: true
---

EOF

    # Ajouter le contenu du module (sans num√©ro de partie)
    for chapter in "$module_dir"/*.md; do
        if [ -f "$chapter" ]; then
            local chapter_name=$(basename "$chapter" .md | sed 's/^[0-9]*_//' | tr '_' ' ')
            echo "" >> "$temp_md"
            echo "# $chapter_name" >> "$temp_md"
            echo "" >> "$temp_md"
            cat "$chapter" >> "$temp_md"
            # S'assurer qu'il y a bien un retour √† la ligne √† la fin
            echo "" >> "$temp_md"
            echo "" >> "$temp_md"
        fi
    done
    
    # Ajouter les travaux pratiques
    local tp_dir=$(ls -d "$TP_DIR/tp${module_num_fmt}_"* 2>/dev/null | head -1)
    if [ -d "$tp_dir" ]; then
        echo "" >> "$temp_md"
        echo "\\newpage" >> "$temp_md"
        echo "" >> "$temp_md"
        echo "# Travaux Pratiques" >> "$temp_md"
        echo "" >> "$temp_md"
        
        for tp_file in "$tp_dir"/*.md; do
            if [ -f "$tp_file" ]; then
                local tp_name=$(basename "$tp_file" .md | tr '_' ' ')
                echo "## $tp_name" >> "$temp_md"
                echo "" >> "$temp_md"
                cat "$tp_file" >> "$temp_md"
                echo "" >> "$temp_md"
            fi
        done
    fi
    
    generate_pdf_from_markdown "$temp_md" "$output_file" "Module $module_num"
}

# Fonction de g√©n√©ration PDF commune - template unique
generate_pdf_from_markdown() {
    local temp_md=$1
    local output_file=$2
    local description=$3
    
    # V√©rifier que le fichier markdown existe
    if [ ! -f "$temp_md" ]; then
        echo "  ‚ùå Fichier markdown introuvable: $temp_md"
        return 1
    fi
    
    # Cr√©er le r√©pertoire de sortie s'il n'existe pas
    mkdir -p "$(dirname "$output_file")"
    
    # Nettoyage des caract√®res probl√©matiques pour LaTeX
    echo "  üßπ Nettoyage des caract√®res probl√©matiques..."
    
    # S'assurer que le fichier se termine par un retour √† la ligne
    if [ -s "$temp_md" ] && [ "$(tail -c1 "$temp_md" | wc -l)" -eq 0 ]; then
        echo "" >> "$temp_md"
    fi
    
    # √âchapper les caract√®res sp√©ciaux LaTeX dans les blocs de code
    sed -i 's/\([^`]\)\$\([^`]\)/\1\\$/g' "$temp_md"  # $ isol√©
    sed -i 's/\$$/\\$/g' "$temp_md"  # $ en fin de ligne
    
    # Autres caract√®res sp√©ciaux LaTeX
    sed -i 's/\\&/\\\\&/g' "$temp_md"  # &
    sed -i 's/\\%/\\\\%/g' "$temp_md"  # %
    sed -i 's/\\#/\\\\#/g' "$temp_md"  # #
    
    # Nettoyage Unicode standard
    "$SCRIPT_DIR/clean_unicode.sh" "$temp_md" > /dev/null 2>&1 || true
    
    # G√©n√©ration avec le template unique
    local current_dir=$(pwd)
    cd "$(dirname "$output_file")"
    
    echo "  üî® G√©n√©ration PDF: $description..."
    
    # G√©n√©ration avec le template formation unique
    echo "  üîç Debug: fichier markdown temporaire: $temp_md"
    
    if pandoc "$temp_md" \
        --template="$TEMPLATE_DIR/formation_template.tex" \
        --pdf-engine=pdflatex \
        --toc \
        --toc-depth=3 \
        --highlight-style=tango \
        --variable geometry:margin=2.5cm \
        --variable fontsize:11pt \
        --variable documentclass:article \
        --variable papersize:a4 \
        --variable lang:fr \
        -o "$(basename "$output_file")" 2>&1; then
        
        echo "  ‚úÖ $description g√©n√©r√©: $(basename "$output_file")"
        cd "$current_dir"
        rm -f "$temp_md"
        return 0
    else
        echo "  ‚ùå Erreur g√©n√©ration $description"
        echo "  üîç Fichier markdown conserv√© pour debug: $temp_md"
        cd "$current_dir"
        return 1
    fi
}

# Ex√©cution principale
echo ""
echo "üìö G√©n√©ration des formations compl√®tes..."
mkdir -p "$BUILD_DIR/formations"

# G√©n√©rer formation acc√©l√©r√©e
generate_formation_acceleree

# G√©n√©rer formation longue  
generate_formation_longue

echo ""
echo "üìñ G√©n√©ration des modules individuels de base..."
success_count=0
for module_num in {1..8}; do
    if generate_individual_module "$module_num"; then
        ((success_count++))
    fi
done

echo ""
echo "üîß G√©n√©ration des modules additionnels..."
"$SCRIPT_DIR/build_modules_additionnels.sh"

# R√©sum√©
echo ""
echo "üìä R√©sum√© de g√©n√©ration:"
if [ -f "$BUILD_DIR/formations/formation_acceleree.pdf" ]; then
    echo "  ‚úÖ Formation acc√©l√©r√©e"
else
    echo "  ‚ùå Formation acc√©l√©r√©e"
fi

if [ -f "$BUILD_DIR/formations/formation_longue.pdf" ]; then
    echo "  ‚úÖ Formation longue"
else
    echo "  ‚ùå Formation longue"  
fi

echo "  ‚úÖ Modules de base: $success_count/8"

echo ""
echo "üìÅ Fichiers g√©n√©r√©s dans: $BUILD_DIR"
echo "üéâ G√©n√©ration termin√©e!"