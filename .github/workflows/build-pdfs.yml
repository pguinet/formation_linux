name: 📚 Build Formation PDFs

on:
  push:
    branches: [ master, main ]
    paths:
      - 'supports/**'
      - 'travaux_pratiques/**'
      - 'scripts/**'
      - '.github/workflows/build-pdfs.yml'
  workflow_dispatch:  # Permet de déclencher manuellement

jobs:
  build-pdfs:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Nécessaire pour créer des releases
      actions: read    # Lire les actions
      packages: read   # Lire les packages (pour les images Docker si besoin)

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🛠️ Install LaTeX and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pandoc \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-lang-french \
          texlive-xetex \
          texlive-fonts-extra \
          texlive-science \
          ghostscript

    - name: ✅ Verify installations
      run: |
        pandoc --version
        pdflatex --version
        gs --version
        echo "📋 Testing French support..."
        pdflatex -interaction=nonstopmode <<< '\documentclass{article}\usepackage[french]{babel}\usepackage[utf8]{inputenc}\begin{document}Test français: é à ç\end{document}' && echo "✅ French support OK" || echo "❌ French support failed"

    - name: 📁 Create build directories
      run: |
        mkdir -p build/formations
        mkdir -p build/modules_base
        mkdir -p build/modules_additionnels
        chmod +x scripts/*.sh

    - name: 📚 Build all formations and modules
      run: |
        echo "📚 Building all formations and modules..."
        ./scripts/build_formations.sh || {
          echo "⚠️ Main script failed, trying CI-optimized script..."
          ./scripts/build_formations_ci.sh || echo "⚠️ Both scripts failed"
        }

    - name: 📊 List generated files
      run: |
        echo "📊 Generated PDFs:"
        find build/ -name "*.pdf" -exec ls -lh {} \; || echo "No PDFs found"

    - name: 📤 Upload all PDFs as artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload même si certains builds ont échoué
      with:
        name: formation-linux-pdfs-${{ github.sha }}
        path: |
          build/**/*.pdf
        retention-days: 90

    - name: 📤 Upload formation accélérée
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: formation-acceleree-pdf
        path: build/formations/formation_acceleree.pdf
        retention-days: 90
        if-no-files-found: warn

    - name: 📤 Upload formation longue
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: formation-longue-pdf
        path: build/formations/formation_longue.pdf
        retention-days: 90
        if-no-files-found: warn

    - name: 📤 Upload modules de base individuels
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: modules-base-individuels-pdf
        path: build/modules_base/*.pdf
        retention-days: 90
        if-no-files-found: warn

    - name: 📤 Upload Git module PDF
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: module-git-pdf
        path: build/modules_additionnels/module_additionnel_git.pdf
        retention-days: 90
        if-no-files-found: warn

    - name: 📤 Upload Docker module PDF
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: module-docker-pdf
        path: build/modules_additionnels/module_additionnel_docker.pdf
        retention-days: 90
        if-no-files-found: warn

    - name: 📋 Build summary
      if: always()
      run: |
        echo "## 📚 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Formation accélérée
        if [ -f "build/formations/formation_acceleree.pdf" ]; then
          size_acceleree=$(du -h build/formations/formation_acceleree.pdf | cut -f1)
          echo "✅ **Formation accélérée** : $size_acceleree" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Formation accélérée** : Failed to build" >> $GITHUB_STEP_SUMMARY
        fi

        # Formation longue
        if [ -f "build/formations/formation_longue.pdf" ]; then
          size_longue=$(du -h build/formations/formation_longue.pdf | cut -f1)
          echo "✅ **Formation longue** : $size_longue" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Formation longue** : Failed to build" >> $GITHUB_STEP_SUMMARY
        fi

        # Modules de base individuels
        modules_count=$(find build/modules_base/ -name "*.pdf" 2>/dev/null | wc -l || echo "0")
        if [ "$modules_count" -gt 0 ]; then
          echo "✅ **Modules de base individuels** : $modules_count modules générés" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Modules de base individuels** : Failed to build" >> $GITHUB_STEP_SUMMARY
        fi

        # Modules additionnels
        if [ -f "build/modules_additionnels/module_additionnel_git.pdf" ]; then
          size_git=$(du -h build/modules_additionnels/module_additionnel_git.pdf | cut -f1)
          echo "✅ **Module Git** : $size_git" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Module Git** : Failed to build" >> $GITHUB_STEP_SUMMARY
        fi

        if [ -f "build/modules_additionnels/module_additionnel_docker.pdf" ]; then
          size_docker=$(du -h build/modules_additionnels/module_additionnel_docker.pdf | cut -f1)
          echo "✅ **Module Docker** : $size_docker" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Module Docker** : Failed to build" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 **Artifacts disponibles :**" >> $GITHUB_STEP_SUMMARY
        echo "- \`formation-linux-pdfs-${{ github.sha }}\` - Tous les PDFs" >> $GITHUB_STEP_SUMMARY
        echo "- \`formation-acceleree-pdf\` - Formation accélérée (8h)" >> $GITHUB_STEP_SUMMARY
        echo "- \`formation-longue-pdf\` - Formation longue (37h30)" >> $GITHUB_STEP_SUMMARY
        echo "- \`modules-base-individuels-pdf\` - 8 modules de base séparés" >> $GITHUB_STEP_SUMMARY
        echo "- \`module-git-pdf\` - Module Git uniquement" >> $GITHUB_STEP_SUMMARY
        echo "- \`module-docker-pdf\` - Module Docker uniquement" >> $GITHUB_STEP_SUMMARY

  # Job optionnel pour créer une release automatique
  create-release:
    needs: build-pdfs
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Nécessaire pour créer des releases
      actions: read    # Lire les actions
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: "*pdf*"
        path: ./pdfs

    - name: 📋 List downloaded files
      run: |
        echo "📋 Downloaded PDFs:"
        find ./pdfs -name "*.pdf" -exec ls -lh {} \; || echo "⚠️ Aucun PDF trouvé"

    - name: ✅ Verify PDFs exist
      run: |
        if find ./pdfs -name "*.pdf" | head -1 | grep -q .; then
          echo "✅ PDFs found, proceeding with release"
          echo "PDF_EXISTS=true" >> $GITHUB_ENV
        else
          echo "❌ No PDFs found, skipping release"
          echo "PDF_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: 🏷️ Create Release
      if: success() && env.PDF_EXISTS == 'true'
      uses: softprops/action-gh-release@v2
      continue-on-error: true
      with:
        tag_name: v${{ github.run_number }}
        name: "Formation Linux - Build ${{ github.run_number }}"
        body: |
          ## 📚 Formation Linux - PDFs automatiques

          **Commit:** `${{ github.sha }}`
          **Branche:** `${{ github.ref_name }}`
          **Date:** ${{ github.event.head_commit.timestamp }}

          ### 📄 Modules disponibles :
          - **Module Git** : Contrôle de version (6-8h)
          - **Module Docker** : Conteneurisation (12-15h)

          ### 🚀 Utilisation :
          1. Télécharger les PDFs depuis les assets ci-dessous
          2. Consulter la [documentation](https://github.com/${{ github.repository }}) pour les prérequis
          3. Suivre les modules dans l'ordre recommandé

          ---
          🤖 Build automatique via GitHub Actions
        files: |
          ./pdfs/**/*.pdf
        draft: false
        prerelease: false
        fail_on_unmatched_files: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Release Status
      if: always()
      run: |
        echo "## 🏷️ Release Information" >> $GITHUB_STEP_SUMMARY
        if [ "${{ env.PDF_EXISTS }}" = "true" ]; then
          echo "✅ **PDFs disponibles** pour release" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Aucun PDF** généré pour cette release" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Alternative :** Les PDFs sont toujours disponibles via les artifacts du build principal." >> $GITHUB_STEP_SUMMARY
        echo "Aller dans [Actions](/${{ github.repository }}/actions) → Build #${{ github.run_number }} → Artifacts" >> $GITHUB_STEP_SUMMARY